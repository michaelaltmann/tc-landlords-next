generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// @@allow('all', true)
model Parcel {
  id                   String  @id
  /// @length(1, 200)
  address              String
  county               String?
  county_pid           String?
  lat                  Float?
  lon                  Float?
  /// @length(0, 200)
  owner_name           String?
  /// @length(0, 200)
  taxpayer_name        String?
  license_num          String?
  portfolio_id         Int
  portfolio_size       Int
  use_class            String?
  /// @length(0, 200)
  owner_address        String?
  homestead            Boolean @default(false)
  zenstack_guard       Boolean @default(true)
  zenstack_transaction String?

  @@index([zenstack_transaction])
  @@index([address], map: "Parcel_address")
  @@index([portfolio_id], map: "Parcel_portfolio_id")
  @@index([portfolio_size], map: "Parcel_portfolio_size")
  @@index([address], map: "address_idx")
}

/// @@allow('all', true)
model Tag {
  id                   Int     @id
  tag_type             String
  /// @length(1, 200)
  tag_value            String
  source_type          String
  source_value         String
  parcel_id            String
  zenstack_guard       Boolean @default(true)
  zenstack_transaction String?

  @@index([zenstack_transaction])
  @@index([parcel_id], map: "Tag_Parcel")
  @@index([tag_value], map: "Tag_tag_value")
}

/// @@allow('all', true)
model Keyword {
  id                   Int     @id
  /// @length(1, 200)
  phrase               String
  parcel_id            String
  zenstack_guard       Boolean @default(true)
  zenstack_transaction String?

  @@index([zenstack_transaction])
  @@index([parcel_id], map: "Keyword_Parcel")
  @@index([phrase], map: "Keyword_phrase")
  @@index([phrase], map: "phrase_idx")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
