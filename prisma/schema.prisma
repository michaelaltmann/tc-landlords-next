//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider="postgresql"
    url=env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

/// @@allow('all', true)
model Parcel {
    id String @id()
    /// @length(1, 200)
    address String
    homestead Boolean @default(false)
    license_num String?
    county String?
    county_pid String?
    lat Float?
    lon Float?
    /// @length(0, 200)
    taxpayer_name String?
    /// @length(0, 200)
    owner_name String?
    /// @length(0, 200)
    owner_address String?
    use_class String?
    portfolio_id Int
    portfolio_size Int
    tags Tag[]
    keywords Keyword[]
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
    @@index([address])
    @@index([portfolio_id])
    @@index([portfolio_size])
}

/// @@allow('all', true)
model Tag {
    id Int @id()
    parcel_id String
    source_type String
    source_value String
    tag_type String
    /// @length(1, 200)
    tag_value String
    parcel Parcel @relation(fields: [parcel_id], references: [id], onDelete: Cascade)
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
    @@index([tag_value])
    @@index([parcel_id])
}

/// @@allow('all', true)
model Keyword {
    id Int @id()
    parcel_id String
    /// @length(1, 200)
    phrase String
    parcel Parcel @relation(fields: [parcel_id], references: [id], onDelete: Cascade)
    zenstack_guard Boolean @default(true)
    zenstack_transaction String?
    @@index([zenstack_transaction])
    @@index([phrase])
    @@index([parcel_id])
}

model Account {
    id String @id() @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id String @id() @default(cuid())
    name String?
    email String? @unique()
    emailVerified DateTime?
    image String?
    accounts Account[]
    sessions Session[]
}

model VerificationToken {
    identifier String
    token String @unique()
    expires DateTime
    @@unique([identifier, token])
}