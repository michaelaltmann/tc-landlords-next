// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}
plugin reactHooks {
  provider = '@zenstackhq/react'
  output = "./src/lib/hooks"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Parcel {
    id        String  @id
    address   String @length(1, 200) 
    homestead Boolean @default(false)
    license_num String?
    county String?
    county_pid String?
    lat       Float?
    lon       Float?
    taxpayer_name   String? @length(0, 200)
    owner_name   String? @length(0, 200)
    owner_address   String? @length(0, 200)
    use_class   String?
    portfolio_id   Int 
    portfolio_size   Int 
        tags    Tag[]
    keywords Keyword[]
    @@allow('all', true)
    @@index([address])
    @@index([portfolio_id])
    @@index([portfolio_size])
}


model Tag {
    id        Int  @id
    parcel_id  String
    source_type String
    source_value String
    tag_type String
    tag_value String @length(1, 200)
    parcel Parcel @relation(fields: [parcel_id], references: [id], onDelete: Cascade)
    @@allow('all', true)
    @@index([tag_value])
    @@index([parcel_id])
}
model Keyword {
    id        Int  @id
    parcel_id  String
    phrase String @length(1, 200)
    parcel Parcel @relation(fields: [parcel_id], references: [id], onDelete: Cascade)
    @@allow('all', true)
    @@index([phrase])
    @@index([parcel_id])
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
